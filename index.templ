package main

import (
	"fmt"
	"strconv"
)

templ Index(words Words, wordList WordList) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<title>Wordex | { words.getWordsString() }</title>
			<link rel="icon" type="image/x-icon" href="/static/wordex.ico"/>
			<link rel="stylesheet" href="/static/index.css"/>
			<script>
      function handleImageError(image) {
      console.log(image)
      image.src = `/static/wordex.png`
      image.alt = "wordex"
    }</script>
		</head>
		<body>
			if wordList == Fantasypics {
				<img id="words-image" src={ fmt.Sprintf("https://images.hearteyesemoji.dev/%s.webp", words.getWordsHypenated()) } alt={ words.getWordsString() } onerror="handleImageError(this)"/>
			} else {
				<img id="words-image" src="/static/wordex.png" alt="wordex"/>
			}
			<div class="centered-text" id="words">
				@WordsDiv(words)
			</div>
			<div class="options">
				<button id="changeBtn">Change Words</button>
				<select id="wordsType">
					<option value="fantasy">Fantasy</option>
					<option value="scifi">Scifi</option>
					<option value="mystery">Mystery</option>
					<option value="fantasynames">Names</option>
					<option value="fantasypics">Fantasy Pics</option>
				</select>
			</div>
			<div id="history">
				<div id="historyList"></div>
			</div>
		</body>
		<script>
    function setQueryStringParameter(name, value) {
        const params = new URLSearchParams(window.location.search);
        params.set(name, value);
        window.history.pushState({}, "", decodeURIComponent(`${window.location.pathname}?${params}`));
    }

    function setWordsType(event) {
      setQueryStringParameter("type", event.target.options[event.target.selectedIndex].value)
    }

    function handleWordsChange(newWordsHtml, words, ok) {
      if (ok) {
        document.getElementById('words').innerHTML = newWordsHtml;
        if (words) {
            const params = new URLSearchParams(window.location.search);
            setQueryStringParameter("words", words)
            document.title = `Wordex | ${words}`
            
            const wordsImage = document.getElementById("words-image")

            if (params.get("type") == "fantasypics") {
              const hypenated = words.split("%2C").sort().join("-")
              wordsImage.src = `https://images.hearteyesemoji.dev/${hypenated}.webp`
              wordsImage.alt = hypenated
            } else if (wordsImage.src != "/static/wordex.png") {
              wordsImage.src = `/static/wordex.png`
              wordsImage.alt = "wordex"
            }
        }

      } else {
        document.getElementById('words').textContent = 'Error loading words';
        console.error('Fetch error:', error);

      }
    }

    async function fetchWords() {
        const params = new URLSearchParams(window.location.search)
        const typeParam = params.get("type")

        const response = await fetch(`/words/${params.size > 0 ? "?"+params.toString() : ""}`);
        const data = await response.text();
        const words = response.headers.get("words")
        handleWordsChange(data, words, response.ok)
    }

    async function handleWordChange(word, index) {
      try {
        const params = new URLSearchParams(window.location.search)
        const response = await fetch(`/word/${index}/${params.size > 0 ? "?"+params.toString() : ""}`);
        if (!response.ok) throw new Error('Network response was not ok');
        const data = await response.text();

        document.getElementById(`word-${index}`).outerHTML = data;
        const words = response.headers.get("words")
        if (words) {
           setQueryStringParameter("words", words)
        }
      } catch (error) {
        document.getElementById(`word-${index}`).textContent = 'Error loading word';
        console.error('Fetch error:', error);
      }
    }

    function init() {
        const params = new URLSearchParams(window.location.search)
        const typeParam = params.get("type")
        if (typeParam) {
          document.getElementById("wordsType").value = typeParam 
        }
    }

    document.getElementById("wordsType").addEventListener("change", setWordsType)
    document.getElementById('changeBtn').addEventListener('click', fetchWords);
    init()

    window.addEventListener("popstate", (event) => {
      window.location.href = window.location.href
    })
  </script>
	</html>
}

templ WordsDiv(words Words) {
	for index, word := range words.Words {
		@WordDiv(word, strconv.Itoa(index))
	}
}

templ WordDiv(word Word, index string) {
	<div id={ fmt.Sprintf("word-%s", index) } class="word-container" style={ fmt.Sprintf("background-color: %s;", word.Color) }>
		<div style="display: flex; flex-direction: column;">
			<span>{ word.Word }</span>
			<span class="subtext">{ word.Subtext }</span>
		</div>
		<button class="rewind-button" onclick={ templ.JSFuncCall("handleWordChange", word.Word, index) } aria-label="Change word">
			<img src="/static/rewind.svg"/>
		</button>
	</div>
}
