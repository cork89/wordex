package main

import (
	"fmt"
	"strconv"
)

templ Index(words Words) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<title>Wordex | { words.getWordsString() }</title>
			<link rel="icon" type="image/x-icon" href="/static/wordex.ico"/>
			<style>
    html,
    body {
      height: 100%;
      margin: 0;
      font-family: Arial, sans-serif;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      background-color: #f0f0f0;
      min-height: 100vh;
      padding-bottom: 140px;
    }
    
    .centered-text {
      font-size: 5rem;
      font-weight: bold;
      text-align: center;
      color: #333;
      margin-bottom: 20px;
    }

    .word-container {
      position: relative;
      display: inline-block;
      margin: 10px;
      padding: 10px 20px;
      border: 3px solid #333;
      border-radius: 10px;
      color: #333;
      user-select: none;
      transition: transform 0.2s ease;
      white-space: nowrap;
    }

    .rewind-button {
      position: absolute;
      top: -5px;
      right: 5px;
      border: none;
      cursor: pointer;
      padding: 0;
      background: transparent;
    }

    .rewind-button:hover {
      background-color: #a1a1a1;
    }

    .options {
      position: fixed;
      bottom: 10rem;
      left: 50%;
      transform: translateX(-50%);
    }

    button {
      font-size: 1.5rem;
      padding: 10px 20px;
      cursor: pointer;
      border: none;
      border-radius: 5px;
      background-color: #007bff;
      color: white;
      transition: background-color 0.3s ease;
      margin-top: 10px;
      margin-right: 20px;
    }

    button:hover {
      background-color: #0056b3;
    }

    .styled-select {
      padding: 8px 24px;
      font-size: 1.5rem;
      border: 1px solid #ccc;
      border-radius: 4px;
      background-color: white;
      color: #333;
      appearance: none;
      -webkit-appearance: none;
      -moz-appearance: none;
      background-image: url("data:image/svg+xml;charset=US-ASCII,%3Csvg%20width%3D'10'%20height%3D'7'%20viewBox%3D'0%200%2010%207'%20xmlns%3D'http%3A//www.w3.org/2000/svg'%3E%3Cpath%20d%3D'M0%200l5%207%205-7z'%20fill%3D'%23666'%20/%3E%3C/svg%3E");
      background-repeat: no-repeat;
      background-position: right 10px center;
      background-size: 10px 7px;
      cursor: pointer;
      padding-left: 12px;
    }

    .styled-select:focus {
      border-color: #007bff;
      outline: none;
      box-shadow: 0 0 3px #007bff;
    }
  </style>
		</head>
		<body>
			<div class="centered-text" id="words">
				@WordsDiv(words)
			</div>
			<div class="options">
				<button id="changeBtn">Change Words</button>
				<select id="wordsType" class="styled-select">
					<option value="fantasy">Fantasy</option>
					<option value="scifi">Scifi</option>
					<option value="mystery">Mystery</option>
				</select>
			</div>
			<div id="history">
				<div id="historyList"></div>
			</div>
		</body>
		<script>
    function setQueryStringParameter(name, value) {
        const params = new URLSearchParams(window.location.search);
        params.set(name, value);
        window.history.pushState({}, "", decodeURIComponent(`${window.location.pathname}?${params}`));
    }

    function setWordsType(event) {
      setQueryStringParameter("type", event.target.options[event.target.selectedIndex].value)
    }

    function handleWordsChange(newWordsHtml, words, ok) {
      if (ok) {
        document.getElementById('words').innerHTML = newWordsHtml;
        if (words) {
            setQueryStringParameter("words", words)
            document.title = `Wordex | ${words}`
        }

      } else {
        document.getElementById('words').textContent = 'Error loading words';
        console.error('Fetch error:', error);

      }
    }

    async function fetchWords() {
        const params = new URLSearchParams(window.location.search)
        const typeParam = params.get("type")

        const response = await fetch(`/words/${params.size > 0 ? "?"+params.toString() : ""}`);
        const data = await response.text();
        const words = response.headers.get("words")
        handleWordsChange(data, words, response.ok)
    }

    async function handleWordChange(word, index) {
      try {
        const params = new URLSearchParams(window.location.search)
        const response = await fetch(`/word/${index}/${params.size > 0 ? "?"+params.toString() : ""}`);
        if (!response.ok) throw new Error('Network response was not ok');
        const data = await response.text();

        document.getElementById(`word-${index}`).outerHTML = data;
        const words = response.headers.get("words")
        if (words) {
           setQueryStringParameter("words", words)
        }
      } catch (error) {
        document.getElementById(`word-${index}`).textContent = 'Error loading word';
        console.error('Fetch error:', error);
      }
    }

    document.getElementById("wordsType").addEventListener("change", setWordsType)
    document.getElementById('changeBtn').addEventListener('click', fetchWords);


    window.addEventListener("popstate", (event) => {
      window.location.href = window.location.href
    })
  </script>
	</html>
}

templ WordsDiv(words Words) {
	for index, word := range words.Words {
		@WordDiv(word, strconv.Itoa(index))
	}
}

templ WordDiv(word Word, index string) {
	<div id={ fmt.Sprintf("word-%s", index) } class="word-container" style={ fmt.Sprintf("background-color: %s; border-color: black;", word.Color) }>
		<span>{ word.Word }</span>
		<button class="rewind-button" onclick={ templ.JSFuncCall("handleWordChange", word.Word, index) } aria-label="Change word">
			<img src="/static/rewind.svg"/>
		</button>
	</div>
}
